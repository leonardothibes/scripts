#!/usr/bin/env php
<?php

class Cpf
{
	/**
     * Mask the CPF.
     *
     * @param  string $cpf
     * @return mixed
    */
    public static function mask($cpf)
    {
        $cpf = trim($cpf);
        $cpf = substr($cpf, 0, 3)  . '.' . substr($cpf, 3, 10);
        $cpf = substr($cpf, 0, 7)  . '.' . substr($cpf, 7, 12);
        $cpf = substr($cpf, 0, 11) . '-' . substr($cpf, 11, 12);
        return (string)$cpf;
    }

	/**
     * Generates a random number of CPF valid.
     *
     * @param bool $mask
     * @return string
     */
    public static function random($mask = false)
    {
        //Gerando os 9 primeiros números.
        $n1 = rand(0, 9);
        $n2 = rand(0, 9);
        $n3 = rand(0, 9);
        $n4 = rand(0, 9);
        $n5 = rand(0, 9);
        $n6 = rand(0, 9);
        $n7 = rand(0, 9);
        $n8 = rand(0, 9);
        $n9 = rand(0, 9);
        //Gerando os 9 primeiros números.

        //Calculando o primeiro dígido verificador.
        $d1 = $n9*2+$n8*3+$n7*4+$n6*5+$n5*6+$n4*7+$n3*8+$n2*9+$n1*10;
        $d1 = 11 - ($d1 % 11);
        if ($d1 >= 10) {
            $d1 = 0;
        }

        //Calculando o segundo dígito verificador.
        $d2 = $d1*2+$n9*3+$n8*4+$n7*5+$n6*6+$n5*7+$n4*8+$n3*9+$n2*10+$n1*11;
        $d2 = 11 - ($d2 % 11);
        if ($d2 >= 10) {
            $d2 = 0;
        }

        //Formando o CPF completo.
        $cpf = $n1.$n2.$n3.$n4.$n5.$n6.$n7.$n8.$n9.$d1.$d2;

        //Mascarando o CPF, se for o caso.
        return (string)($mask === true) ? self::mask($cpf) : $cpf;
    }
}

echo Cpf::random(true) . "\n";

